name: Java CI with Gradle

on:
  push:
    branches: [ "dev", "main" ] # 메인에 푸시되면
  pull_request:
    branches: [ "dev", "main" ] # 메인에 PR되면

jobs:
  build: # 첫 번째 작업
    ### 테스트용 mysql
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        #mysql 설정
        env:
          # MYSQL_USER : 지정하지 않은경우 root
          MYSQL_ROOT_PASSWORD: 12345678 # 비밀번호
          MYSQL_DATABASE: actions_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-start-period=30s --health-timeout=5s --health-retries=3

    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/actions_test
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 12345678
#      SPRING_JWT_SECRET: ${{secrets.SPRING_JWT_SECRET}}
#      AWS_S3_BUCKET: ${{secrets.AWS_S3_BUCKET}}
#      AWS_STACK_AUTO: ${{secrets.AWS_STACK_AUTO}}
#      AWS_REGION: ${{secrets.AWS_REGION}}
#      AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
#      AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY}}
#      MULTIPART_MAX_FILE_SIZE: ${{secrets.MULTIPART_MAX_FILE_SIZE}}
#      MULTIPART_MAX_REQUEST_SIZE: ${{secrets.MULTIPART_MAX_REQUEST_SIZE}}
    permissions:
      pull-requests: write  # PR에 댓글, 체크 실행을 할 수 있는 권한
      checks: write          # 체크 결과를 기록할 권한
      actions: read          # GitHub Actions의 정보를 읽을 수 있는 권한

    steps:
      - uses: actions/checkout@v4 # actions/checkout의 버전이 v4, 깃허브 액션 실행 환경으로 복사

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-layers
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Pull MySQL Image
        run: docker pull mysql:5.7

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle Wrapper로 빌드 실행
      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

      # Gradle 설정 및 의존성 캐싱
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Run tests # 테스트 실행
        run: ./gradlew test

      - name: Upload Test Results # 테스트 결과 보고
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/reports/tests/test

  dependency-submission: # 두 번째 작업
    needs: build

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
